expression_input = _{ SOI ~ expr_top ~ EOI }

expr_top            = _{ expression_body ~ where_clause? }
expression_body     = _{ or_operand }

//definitions that establish precedence of operators
or_operand  = { and_operand ~ (or_op ~ and_operand)* }
and_operand = { not_operand ~ (and_op ~ not_operand)* }
not_operand = { not_op? ~ comp_operand ~ where_clause? }
// operators of the same level can be parsed together as they are left-associative
comp_operand = { add_operand ~ (comparison_operator ~ add_operand)* }
add_operand  = { mul_operand ~ ((plus | minus) ~ mul_operand)* }
mul_operand  = { primary_expression ~ ((mul | div) ~ primary_expression)* }

// all expressions accept a modifier clause after them
primary_expression = _{
    (if_expr | case_expr | literal | function_expr | field_reference | "(" ~ expr_top ~ ")") ~ where_clause?
}

literal = _{ number | boolean_literal | string_literal }

// function calls can have a modifier clause after them
// and a window clause after that, or just a window clause
function_expr      = _{ function_call ~ ((where_clause ~ window_clause) | window_clause)? }
function_call      =  { identifier ~ "(" ~ function_arguments ~ ")" }
function_arguments =  { function_argument ~ ("," ~ function_argument)* }
function_argument  = _{ expr_top }

//WHERE clause definition
where_clause         = { ^"[where" ~ (((allow_field_filters | ignore_field_filters) ~ (^"and" ~ filter_expr+)?) | filter_expr+) ~ "]" }
filter_expr          = { expr_top }
allow_field_filters  = { ^"allow" ~ (^"filters" ~ ^"on")? ~ field_reference ~ ("," ~ field_reference)* }
ignore_field_filters = { ^"ignore" ~ (ignore_all_filters | ((^"filters" ~ ^"on")? ~ field_reference ~ ("," ~ field_reference)*)) }
ignore_all_filters  = { ^"all" ~ ^"filters" }

//GROUP BY clause definition
window_clause   =  { "[" ~ ^"group" ~ ^"by" ~ (all_groups | (group_def ~ ("," ~ group_def)*)) ~ "]" }
all_groups      =  { ^"all" ~ ^"groups" }
group_def   =  _{ group_reference | field_reference }
group_reference = _{ ^"group(" ~ group_index ~ ")" }
group_index     =  { ASCII_DIGIT+ }

//conditional expressions
if_expr     = { if_branch ~ else_branch }
if_branch   = _{ ^"if" ~ expr_top ~ ^"then" ~ expr_top }
else_branch = _{ ^"else" ~ expr_top }

case_expr   =  { ^"case" ~ branch_expr ~ else_branch? ~ ^"end" }
branch_expr = _{ when_expr ~ (when_expr)* }
when_expr   =  { ^"when" ~ expr_top ~ ^"then" ~ expr_top }

//primitives: literals and operators
string_literal       = @{ "\"" ~ (raw_string_character | escaped_character)* ~ "\"" }
raw_string_character = @{ (!"\"" ~ !"\\" ~ ANY) }
escaped_character    = @{ "\\" ~ ("\"" | "\\") }

identifier      = @{ (LETTER | "_") ~ (LETTER | "_" | ASCII_DIGIT)* }
field_reference = @{ (identifier ~ "." ~ identifier) | identifier }

number  = _{ float | integer }
integer = @{ "-"? ~ ASCII_DIGIT+ ~ (exp ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
float   = @{ "-"? ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ ~ (exp ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
exp     = @{ "e" | "E" }

comparison_operator = _{ gte_op | lte_op | eq_op | neq_op | lt_op | gt_op }
gte_op              = @{ ">=" }
gt_op               = @{ ">" }
lte_op              = @{ "<=" }
lt_op               = @{ "<" }
neq_op              = @{ "!=" }
eq_op               = @{ "=" }
and_op              = @{ ^"and" }
or_op               = @{ ^"or" }
not_op              = @{ ^"not" }
boolean_literal     = @{ ^"true" | ^"false" }

plus  = @{ "+" }
minus = @{ "-" }
mul   = @{ "*" }
div   = @{ "/" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
