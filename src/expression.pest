expression_input = _{ SOI ~ expr_top ~ EOI }

expr_top = _{ or_operand }

or_operand = { and_operand ~ (or_op ~ and_operand)* }
and_operand = { not_operand ~ (and_op ~ not_operand)* }
not_operand = { not_op? ~ comp_operand }
comp_operand = { add_operand ~ (comparison_operator ~ add_operand)* }
add_operand = { mul_operand ~ ((plus | minus) ~ mul_operand)* }
mul_operand = { primary_expression ~ ((mul | div) ~ primary_expression)* }

primary_expression = _{ literal | function_call | field_reference | "(" ~ expr_top ~ ")" }

literal = _{ number | boolean_literal | string_literal }

function_call = { identifier ~ "(" ~ function_arguments ~ ")" }
function_arguments = { function_argument ~ ("," ~ function_argument)* }
function_argument = _{ expr_top }

string_literal = @{ "\"" ~ (raw_string_character | escaped_character)* ~ "\"" }
raw_string_character = @{ (!"\"" ~ !"\\" ~ ANY) }
escaped_character = @{ "\\" ~ ( "\"" | "\\" ) }

identifier = @{ (LETTER | "_") ~ (LETTER | "_" | ASCII_DIGIT)* }
field_reference = @{ (identifier ~ "." ~ identifier) | identifier }

number = _{ float | integer }
integer = @{ "-"? ~ ASCII_DIGIT+ ~ (exp ~ ("+" | "-")? ~ ASCII_DIGIT+)?}
float = @{ "-"? ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ ~ (exp ~ ("+" | "-")? ~ ASCII_DIGIT+)?}
exp = @{ "e" | "E" }

comparison_operator = _{ eq_op | neq_op | lt_op | lte_op | gt_op | gte_op }
gte_op = @{ ">=" }
gt_op = @{ ">" }
lte_op = @{ "<=" }
lt_op = @{ "<" }
neq_op = @{ "!=" }
eq_op = @{ "==" }
and_op = @{ ^"and" }
or_op = @{ ^"or" }
not_op = @{ ^"not" }
boolean_literal = @{ ^"true" | ^"false" }

plus = @{ "+" }
minus = @{ "-" }
mul = @{ "*" }
div = @{ "/" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }